{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DisplayData","temp","this","props","inp","completeTasks","map","i","checked","react_default","a","createElement","key","indexOf","data","inCompleteTasks","id","React","Component","MyData","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","submit","arr","handleChange","bind","assertThisInitialized","handleSubmit","handleDelete","handleCheck","event","setState","target","value","preventDefault","temp1","push","sort","b","tempArr","index","currentTarget","dataset","splice","_this2","items","onChange","data-id","type","style","textDecoration","onClick","className","App_DisplayData","href","App","App_MyData","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bfc4893.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass DisplayData extends React.Component {\n  render() {\n    var temp = this.props.inp;\n    var completeTasks = this.props.inp.map(function (i) {\n      if (i.checked === true) {\n        return <li key={temp.indexOf(i)}>{i.data}</li>\n      }\n    });\n\n    var inCompleteTasks = this.props.inp.map(function (i) {\n      if (i.checked === false) {\n        return <li key={temp.indexOf(i)}>{i.data}</li>\n      }\n    });\n    return (\n      <div>\n        <div id=\"incompleted-list\">\n          <h2>Incomplete Tasks</h2>\n          <ul>\n            {inCompleteTasks}\n          </ul>\n        </div>\n        <div id=\"completed-list\">\n          <h2>Complete Tasks</h2>\n          <ul>\n            {completeTasks}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass MyData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: '',\n      arr: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var temp = this.state.arr;\n    var temp1 = {\n      data: this.state.input,\n      checked: false\n    }\n    temp.push(temp1);\n    temp.sort(function (a, b) { return a.checked - b.checked });\n    this.setState({\n      input: '',\n      submit: this.state.input,\n      arr: temp\n    });\n  }\n\n  handleCheck(event) {\n    var tempArr = this.state.arr;\n    var index = event.currentTarget.dataset.id;\n\n    tempArr[index].checked = !tempArr[index].checked;\n    tempArr.sort(function (a, b) { return a.checked - b.checked });\n\n    this.setState({\n      arr: tempArr\n    });\n  }\n\n  handleDelete(event) {\n    event.preventDefault();\n    var index = event.currentTarget.dataset.id;\n    var temp = this.state.arr;\n    temp.splice(index, 1);\n\n    this.setState({\n      arr: temp\n    });\n\n  }\n\n  render() {\n    const items = this.state.arr.map(i =>\n      <li key={this.state.arr.indexOf(i)} >\n        <input onChange={this.handleCheck} data-id={this.state.arr.indexOf(i)} type=\"checkbox\" value={i.data} checked={(i.checked === true) ? true : false} />\n        {(i.checked === true) ? <p style={{ textDecoration: \"line-through\" }}>{i.data}</p> : <p>{i.data}</p>}\n        <button id=\"delButton\" value={i.data} data-id={this.state.arr.indexOf(i)} onClick={this.handleDelete}>x</button>\n      </li>\n    );\n    return (\n      <div>\n        <div className=\"form\">\n          <h2>Todo List</h2>\n          <form>\n            <input id=\"text-field\" type='text' value={this.state.input} onChange={this.handleChange} />\n            <button className=\"roundButton\" onClick={this.handleSubmit}>+</button>\n          </form>\n          <ul>\n            {items}\n          </ul>\n          <DisplayData inp={this.state.arr} />\n        </div>\n        <div id=\"author\">\n          <p>Designed and Coded by <b>Usman Fayyaz</b>.</p> <br />\n          <a href=\"https://github.com/UsmanFayyaz/todo-list\">Link to github repository.</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <MyData />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}