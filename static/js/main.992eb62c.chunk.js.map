{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DisplayData","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","array","inp","arrayTemp","msg","doneTask","bind","assertThisInitialized","unDoneTask","temp","input","i","checked","push","length","setState","list","map","react_default","a","createElement","key","data","style","marginRight","onClick","React","Component","MyData","_this2","submit","arr","handleChange","handleSubmit","handleDelete","handleCheck","event","target","value","preventDefault","temp1","tempArr","filter","_this3","items","onChange","type","textDecoration","id","className","App_DisplayData","App","App_MyData","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.992eb62c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass DisplayData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: this.props.inp,\n      arrayTemp: [],\n      msg: \"\"\n    }\n    this.doneTask = this.doneTask.bind(this);\n    this.unDoneTask = this.unDoneTask.bind(this);\n  }\n\n  doneTask(){\n    var temp =[];\n    var input = this.props.inp;\n\n    for(var i in input) {\n      if(input[i].checked === true) {\n        temp.push(input[i]);\n      }\n    }\n    if(temp.length !== 0) {\n      this.setState({\n        arrayTemp: temp,\n        msg: \"The completed tasks are:\"\n      });\n    }\n  }\n\n  unDoneTask(){\n    var temp =[];\n    var input = this.props.inp;\n\n    for(var i in input) {\n      if(input[i].checked === false) {\n        temp.push(input[i]);\n      }\n    }\n\n    if(temp.length !== 0) {\n      this.setState({\n        arrayTemp: temp,\n        msg: \"The incomplete tasks are:\"\n      });\n    }\n  }\n\n  render() {\n    var list = this.state.arrayTemp.map(i=> <li key = {i.data+1}>{i.data}</li>);\n    return (\n      <div>\n        <button style={{marginRight: 20}} onClick={this.doneTask}>Show Complete Tasks</button>\n        <button onClick={this.unDoneTask}>Show Incomplete Tasks</button>\n        <h3>{this.state.msg}</h3>\n        <ul>\n          {list}\n        </ul>\n      </div>\n    );\n  }\n}\n\nclass MyData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: '',\n      arr: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n  }\n  \n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var temp = this.state.arr;\n    var temp1={\n      data: this.state.input,\n      checked: false\n    }\n    temp.push(temp1);\n    \n    this.setState({\n      input: '',\n      submit: this.state.input,\n      arr: temp\n    });\n  }\n\n  handleCheck(event){\n    var tempArr = this.state.arr;\n    \n    for(var i in this.state.arr) {\n      if(tempArr[i].data === event.target.value){\n        tempArr[i].checked = !tempArr[i].checked;\n      }\n    }\n    this.setState({\n      arr: tempArr\n    });\n  }\n\n  handleDelete(event){\n    event.preventDefault();\n    var temp = this.state.arr;\n    temp = temp.filter(a => a.data !== event.target.value);\n\n    this.setState({\n      arr: temp\n    });\n\n  }\n\n  render() {\n    const items = this.state.arr.map(i => \n      <li key={i.data+1}>\n        <input onChange={this.handleCheck} type=\"checkbox\" value={i.data} /> \n        {(i.checked === true) ? <p style={{textDecoration: \"line-through\"}}>{i.data}</p> : <p>{i.data}</p>}\n        <button id=\"delButton\" value={i.data} onClick={this.handleDelete}>x</button>\n      </li>\n    );\n    return(\n      <div className=\"form\">\n        <h2>Todo List</h2>\n        <form>\n          <input type='text' value={this.state.input} onChange={this.handleChange}/>\n          <button className=\"roundButton\" onClick={this.handleSubmit}>+</button>\n        </form>\n        <ul>\n          {items}\n        </ul>\n        <DisplayData inp = {this.state.arr}/>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n      <MyData />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}